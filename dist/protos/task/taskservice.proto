// Code generated by furo spectools. DO NOT EDIT.

syntax = "proto3";
package task;
option go_package = "github.com/theNorstroem/todo-specs/dist/pb/task;taskpb";
option java_multiple_files = true;
option java_outer_classname = "TaskserviceProto";
option java_package = "pro.furo.todo";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "task/reqmsgs.proto";
import "task/task.proto";


// Doing nothing is very hard to do… you never know when you’re finished.
// Having some tasks can help you a lot by giving you that comfortable feeling that you
// did something.
// 
service Tasks {

  // Use this to create new tasks.
  rpc CreateTasks (CreateTasksRequest) returns (google.protobuf.Empty){
	//Create: POST /tasks task.Task , google.protobuf.Empty #Use this to create new tasks.
	option (google.api.http) = {
		post: "/tasks"
		body: "body"
	};
  }

  // Use this to delete existing tasks.
  rpc DeleteTasks (DeleteTasksRequest) returns (google.protobuf.Empty){
	//Delete: DELETE /tasks/{tsk} google.protobuf.Empty , google.protobuf.Empty #Use this to delete existing tasks.
	option (google.api.http) = {
		delete: "/tasks/{tsk}"
		
	};
  }

  // Use this to delete ALL tasks.
  rpc DeleteAllTaskss (DeleteAllTaskssRequest) returns (google.protobuf.Empty){
	//DeleteAll: DELETE /tasks google.protobuf.Empty , google.protobuf.Empty #Use this to delete ALL tasks.
	option (google.api.http) = {
		delete: "/tasks"
		
	};
  }

  // Custom methods are always POST.
  rpc FermentTasks (FermentTasksRequest) returns (google.protobuf.Empty){
	//Ferment: POST /tasks/{tsk}:ferment google.protobuf.Empty , google.protobuf.Empty #Custom methods are always POST.
	option (google.api.http) = {
		post: "/tasks/{tsk}:ferment"
		body: "body"
	};
  }

  // Returns a single task.
  rpc GetTasks (GetTasksRequest) returns (task.TaskEntity){
	//Get: GET /tasks/{tsk} google.protobuf.Empty , task.TaskEntity #Returns a single task.
	option (google.api.http) = {
		get: "/tasks/{tsk}"
		
	};
  }

  // List tasks with pagination.
  rpc ListTaskss (ListTaskssRequest) returns (task.TaskCollection){
	//List: GET /tasks google.protobuf.Empty , task.TaskCollection #List tasks with pagination.
	option (google.api.http) = {
		get: "/tasks"
		
	};
  }

  // Use this to update existing tasks. PATCH is also supported
  rpc UpdateTasks (UpdateTasksRequest) returns (task.TaskEntity){
	//Update: PUT /tasks/{tsk} task.Task , task.TaskEntity #Use this to update existing tasks. PATCH is also supported
	option (google.api.http) = {
		put: "/tasks/{tsk}"
		body: "body"
		additional_bindings {
            patch: "/tasks/{tsk}"
            body: "body"
        }
	};
  }

}


