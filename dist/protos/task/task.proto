// Code generated by furo-proto-gen. DO NOT EDIT.
syntax = "proto3";
package task;
option go_package = "github.com/theNorstroem/todo-specs/dist/pb/task;taskpb";
option java_multiple_files = true;
option java_outer_classname = "TaskProto";
option java_package = "pro.furo.todo";

import "furo/fat/fat.proto";
import "furo/filter/filter.proto";
import "furo/furo.proto";
import "google/type/date.proto";
import "person/person.proto";


// The checkboxItem is not used at the moment, we plan to replace the repeated string (field checklist) of the task with this type.
message CheckboxItem {  

    // This is the description of the checkbox item
    string display_name = 2;

    // Sample
    bool done = 3;

    // Add some notes
    string note = 4;
}

// Filterable fields for the task type This type should be used in the filter argument for the List method. Use the --filterChanged(*._base64) to connect to the filter of the collection agent
message Filter {  

    // Filter for text in the task label
    furo.filter.Condition display_name = 1;

    // Filter for text in the notes
    furo.filter.Condition note = 2;

    // Filter for the due date
    furo.filter.Condition due_date = 3;

    // Filter for completed tasks
    furo.filter.Condition done = 5;

    // Filter for the person with the id of the person
    furo.filter.Condition person = 6;
}

// Use this to set a reference to a task
message Reference {  

    // Id of the referenced task.
    string id = 1;

    // Label of the referenced task
    string display_name = 2;

    // HTS for the initial search (works on root resources only)
    furo.Link link = 3;
}

// Tasks are essential at work.
message Task {  

    // Task id (is a ULID).
    string id = 1;

    // We use this field label the task
    string display_name = 2;

    // Add some notes
    furo.fat.String note = 3;

    // The parent for this task
    task.Reference parent = 4;

    // A task can have a checklist (more work)
    repeated string checklist = 5;

    // Use this to give pressure.
    google.type.Date due_date = 6;

    // Maybe we can benefit.
    repeated task.Reference related_tasks = 7;

    // Sometimes a task is to hard for one person only.
    repeated person.Reference involved_persons = 8;

    // If something goes wrong, we should be able to make some one responsible for it. This is aligned with our CYA strategy.
    person.Reference responsible_person = 9;

    // this si maybe the main feature.
    bool done = 10;
}

// Collectioncontainer which holds a task.Task
message TaskCollection {  

    // the data contains a task.Task
    repeated task.TaskEntity entities = 1;

    // the Hateoas links
    repeated furo.Link links = 2;

    // Meta for the response
    furo.Meta meta = 3;
}

// Entitycontainer which holds a task.Task
message TaskEntity {  

    // the data contains a task.Task
    task.Task data = 1;

    // the Hateoas links
    repeated furo.Link links = 2;

    // Meta for the response
    furo.Meta meta = 3;
}