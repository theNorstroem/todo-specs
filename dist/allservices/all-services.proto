// Code generated by furo spectools. DO NOT EDIT.

syntax = "proto3";
package allservices;
option go_package = "github.com/theNorstroem/todo-specs/dist/pb/allservices;allservicespb";
option java_multiple_files = true;
option java_outer_classname = "TodoAllServices";
option java_package = "com.github.thenorstroem.todo.allservices";

import "auth/auth.proto";
import "auth/reqmsgs.proto";
import "demo/demo.proto";
import "demo/reqmsgs.proto";
import "furo/signatures/signatures.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "person/person.proto";
import "person/reqmsgs.proto";
import "task/reqmsgs.proto";
import "task/task.proto";





// Login with credentials. The service should set a auth cookie on successful login and delete it on logout
service AuthSession {

  // Login with credentials #A login is nothing else then creating a valid session
  rpc CreateAuthSession (auth.CreateAuthSessionRequest) returns (google.protobuf.Empty){
	//Create: POST /auth auth.Credentials , google.protobuf.Empty #Login with credentials #A login is nothing else then creating a valid session
	option (google.api.http) = {
		post: "/auth"
		body: "body"
	};
  }

  // Logout.
  rpc DeleteAuthSession (auth.DeleteAuthSessionRequest) returns (google.protobuf.Empty){
	//Delete: DELETE /auth google.protobuf.Empty , google.protobuf.Empty #Logout.
	option (google.api.http) = {
		delete: "/auth"
		
	};
  }

}





// Give some good description here please
// 
service Demos {

  // Use this to create new persons.
  rpc CreateDemos (demo.CreateDemosRequest) returns (furo.signatures.EmptyEntity){
	//Create: POST /demos demo.Demo , furo.signatures.EmptyEntity #Use this to create new persons.
	option (google.api.http) = {
		post: "/demos"
		body: "body"
	};
  }

  // Returns a single person.
  rpc GetDemos (demo.GetDemosRequest) returns (demo.DemoEntity){
	//Get: GET /demos/{dem} google.protobuf.Empty , demo.DemoEntity #Returns a single person.
	option (google.api.http) = {
		get: "/demos/{dem}"
		
	};
  }

  // List persons with pagination.
  rpc ListDemoss (demo.ListDemossRequest) returns (demo.DemoCollection){
	//List: GET /demos google.protobuf.Empty , demo.DemoCollection #List persons with pagination.
	option (google.api.http) = {
		get: "/demos"
		
	};
  }

}





// People / persons are important to us, they should do the work for us.
// 
service Persons {

  // Use this to create new persons.
  rpc CreatePerson (person.CreatePersonRequest) returns (furo.signatures.EmptyEntity){
	//Create: POST /persons person.Person , furo.signatures.EmptyEntity #Use this to create new persons.
	option (google.api.http) = {
		post: "/persons"
		body: "body"
	};
  }

  // We use this to disable a person in the list, we do not delete them.
  rpc DeletePerson (person.DeletePersonRequest) returns (google.protobuf.Empty){
	//Delete: DELETE /persons/{prs} google.protobuf.Empty , google.protobuf.Empty #We use this to disable a person in the list, we do not delete them.
	option (google.api.http) = {
		delete: "/persons/{prs}"
		
	};
  }

  // Fireing some persons can increase the performance of the other persons POST. Do not use this to much. The big downside is, that you have to assign their work to somone other.
  rpc FirePerson (person.FirePersonRequest) returns (google.protobuf.Empty){
	//Fire: POST /persons/{prs}:ferment google.protobuf.Empty , google.protobuf.Empty #Fireing some persons can increase the performance of the other persons POST. Do not use this to much. The big downside is, that you have to assign their work to somone other.
	option (google.api.http) = {
		post: "/persons/{prs}:ferment"
		body: "body"
	};
  }

  // Returns a single person.
  rpc GetPerson (person.GetPersonRequest) returns (person.PersonEntity){
	//Get: GET /persons/{prs} google.protobuf.Empty , person.PersonEntity #Returns a single person.
	option (google.api.http) = {
		get: "/persons/{prs}"
		
	};
  }

  // List persons with pagination.
  rpc ListPersons (person.ListPersonsRequest) returns (person.PersonCollection){
	//List: GET /persons google.protobuf.Empty , person.PersonCollection #List persons with pagination.
	option (google.api.http) = {
		get: "/persons"
		
	};
  }

  // Use this to update existing persons. PATCH is also supported
  rpc UpdatePerson (person.UpdatePersonRequest) returns (person.PersonEntity){
	//Update: PUT /persons/{prs} person.Person , person.PersonEntity #Use this to update existing persons. PATCH is also supported
	option (google.api.http) = {
		put: "/persons/{prs}"
		body: "body"
		additional_bindings {
            patch: "/persons/{prs}"
            body: "body"
        }
	};
  }

}





// Doing nothing is very hard to do… you never know when you’re finished.
// Having some tasks can help you a lot by giving you that comfortable feeling that you
// did something.
// 
service Tasks {

  // Use this to create new tasks.
  rpc CreateTask (task.CreateTaskRequest) returns (furo.signatures.EmptyEntity){
	//Create: POST /tasks task.Task , furo.signatures.EmptyEntity #Use this to create new tasks.
	option (google.api.http) = {
		post: "/tasks"
		body: "body"
	};
  }

  // Use this to delete existing tasks.
  rpc DeleteTask (task.DeleteTaskRequest) returns (google.protobuf.Empty){
	//Delete: DELETE /tasks/{tsk} google.protobuf.Empty , google.protobuf.Empty #Use this to delete existing tasks.
	option (google.api.http) = {
		delete: "/tasks/{tsk}"
		
	};
  }

  // Use this to delete ALL tasks.
  rpc DeleteAllTaskss (task.DeleteAllTaskssRequest) returns (google.protobuf.Empty){
	//DeleteAll: DELETE /tasks google.protobuf.Empty , google.protobuf.Empty #Use this to delete ALL tasks.
	option (google.api.http) = {
		delete: "/tasks"
		
	};
  }

  // Returns a single task.
  rpc GetTask (task.GetTaskRequest) returns (task.TaskEntity){
	//Get: GET /tasks/{tsk} google.protobuf.Empty , task.TaskEntity #Returns a single task.
	option (google.api.http) = {
		get: "/tasks/{tsk}"
		
	};
  }

  // List tasks with pagination.
  rpc ListTasks (task.ListTasksRequest) returns (task.TaskCollection){
	//List: GET /tasks google.protobuf.Empty , task.TaskCollection #List tasks with pagination.
	option (google.api.http) = {
		get: "/tasks"
		
	};
  }

  // Custom methods are always POST.
  rpc SuspendTask (task.SuspendTaskRequest) returns (google.protobuf.Empty){
	//Suspend: POST /tasks/{tsk}:suspend google.protobuf.Empty , google.protobuf.Empty #Custom methods are always POST.
	option (google.api.http) = {
		post: "/tasks/{tsk}:suspend"
		body: "body"
	};
  }

  // Use this to update existing tasks. PATCH is also supported
  rpc UpdateTask (task.UpdateTaskRequest) returns (task.TaskEntity){
	//Update: PUT /tasks/{tsk} task.Task , task.TaskEntity #Use this to update existing tasks. PATCH is also supported
	option (google.api.http) = {
		put: "/tasks/{tsk}"
		body: "body"
		additional_bindings {
            patch: "/tasks/{tsk}"
            body: "body"
        }
	};
  }

}



