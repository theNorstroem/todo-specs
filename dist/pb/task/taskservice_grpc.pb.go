// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package taskpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TasksClient is the client API for Tasks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TasksClient interface {
	// Use this to create new tasks.
	CreateTasks(ctx context.Context, in *CreateTasksRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Use this to delete existing tasks.
	DeleteTasks(ctx context.Context, in *DeleteTasksRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Use this to delete ALL tasks.
	DeleteAllTaskss(ctx context.Context, in *DeleteAllTaskssRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Custom methods are always POST.
	FermentTasks(ctx context.Context, in *FermentTasksRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Returns a single task.
	GetTasks(ctx context.Context, in *GetTasksRequest, opts ...grpc.CallOption) (*TaskEntity, error)
	// List tasks with pagination.
	ListTaskss(ctx context.Context, in *ListTaskssRequest, opts ...grpc.CallOption) (*TaskCollection, error)
	// Use this to update existing tasks. PATCH is also supported
	UpdateTasks(ctx context.Context, in *UpdateTasksRequest, opts ...grpc.CallOption) (*TaskEntity, error)
}

type tasksClient struct {
	cc grpc.ClientConnInterface
}

func NewTasksClient(cc grpc.ClientConnInterface) TasksClient {
	return &tasksClient{cc}
}

func (c *tasksClient) CreateTasks(ctx context.Context, in *CreateTasksRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/task.Tasks/CreateTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) DeleteTasks(ctx context.Context, in *DeleteTasksRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/task.Tasks/DeleteTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) DeleteAllTaskss(ctx context.Context, in *DeleteAllTaskssRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/task.Tasks/DeleteAllTaskss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) FermentTasks(ctx context.Context, in *FermentTasksRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/task.Tasks/FermentTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) GetTasks(ctx context.Context, in *GetTasksRequest, opts ...grpc.CallOption) (*TaskEntity, error) {
	out := new(TaskEntity)
	err := c.cc.Invoke(ctx, "/task.Tasks/GetTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) ListTaskss(ctx context.Context, in *ListTaskssRequest, opts ...grpc.CallOption) (*TaskCollection, error) {
	out := new(TaskCollection)
	err := c.cc.Invoke(ctx, "/task.Tasks/ListTaskss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) UpdateTasks(ctx context.Context, in *UpdateTasksRequest, opts ...grpc.CallOption) (*TaskEntity, error) {
	out := new(TaskEntity)
	err := c.cc.Invoke(ctx, "/task.Tasks/UpdateTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TasksServer is the server API for Tasks service.
// All implementations must embed UnimplementedTasksServer
// for forward compatibility
type TasksServer interface {
	// Use this to create new tasks.
	CreateTasks(context.Context, *CreateTasksRequest) (*emptypb.Empty, error)
	// Use this to delete existing tasks.
	DeleteTasks(context.Context, *DeleteTasksRequest) (*emptypb.Empty, error)
	// Use this to delete ALL tasks.
	DeleteAllTaskss(context.Context, *DeleteAllTaskssRequest) (*emptypb.Empty, error)
	// Custom methods are always POST.
	FermentTasks(context.Context, *FermentTasksRequest) (*emptypb.Empty, error)
	// Returns a single task.
	GetTasks(context.Context, *GetTasksRequest) (*TaskEntity, error)
	// List tasks with pagination.
	ListTaskss(context.Context, *ListTaskssRequest) (*TaskCollection, error)
	// Use this to update existing tasks. PATCH is also supported
	UpdateTasks(context.Context, *UpdateTasksRequest) (*TaskEntity, error)
	mustEmbedUnimplementedTasksServer()
}

// UnimplementedTasksServer must be embedded to have forward compatible implementations.
type UnimplementedTasksServer struct {
}

func (UnimplementedTasksServer) CreateTasks(context.Context, *CreateTasksRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTasks not implemented")
}
func (UnimplementedTasksServer) DeleteTasks(context.Context, *DeleteTasksRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTasks not implemented")
}
func (UnimplementedTasksServer) DeleteAllTaskss(context.Context, *DeleteAllTaskssRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllTaskss not implemented")
}
func (UnimplementedTasksServer) FermentTasks(context.Context, *FermentTasksRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FermentTasks not implemented")
}
func (UnimplementedTasksServer) GetTasks(context.Context, *GetTasksRequest) (*TaskEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasks not implemented")
}
func (UnimplementedTasksServer) ListTaskss(context.Context, *ListTaskssRequest) (*TaskCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskss not implemented")
}
func (UnimplementedTasksServer) UpdateTasks(context.Context, *UpdateTasksRequest) (*TaskEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTasks not implemented")
}
func (UnimplementedTasksServer) mustEmbedUnimplementedTasksServer() {}

// UnsafeTasksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TasksServer will
// result in compilation errors.
type UnsafeTasksServer interface {
	mustEmbedUnimplementedTasksServer()
}

func RegisterTasksServer(s *grpc.Server, srv TasksServer) {
	s.RegisterService(&_Tasks_serviceDesc, srv)
}

func _Tasks_CreateTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).CreateTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.Tasks/CreateTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).CreateTasks(ctx, req.(*CreateTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_DeleteTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).DeleteTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.Tasks/DeleteTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).DeleteTasks(ctx, req.(*DeleteTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_DeleteAllTaskss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllTaskssRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).DeleteAllTaskss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.Tasks/DeleteAllTaskss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).DeleteAllTaskss(ctx, req.(*DeleteAllTaskssRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_FermentTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FermentTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).FermentTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.Tasks/FermentTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).FermentTasks(ctx, req.(*FermentTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_GetTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).GetTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.Tasks/GetTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).GetTasks(ctx, req.(*GetTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_ListTaskss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskssRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).ListTaskss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.Tasks/ListTaskss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).ListTaskss(ctx, req.(*ListTaskssRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_UpdateTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).UpdateTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.Tasks/UpdateTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).UpdateTasks(ctx, req.(*UpdateTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tasks_serviceDesc = grpc.ServiceDesc{
	ServiceName: "task.Tasks",
	HandlerType: (*TasksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTasks",
			Handler:    _Tasks_CreateTasks_Handler,
		},
		{
			MethodName: "DeleteTasks",
			Handler:    _Tasks_DeleteTasks_Handler,
		},
		{
			MethodName: "DeleteAllTaskss",
			Handler:    _Tasks_DeleteAllTaskss_Handler,
		},
		{
			MethodName: "FermentTasks",
			Handler:    _Tasks_FermentTasks_Handler,
		},
		{
			MethodName: "GetTasks",
			Handler:    _Tasks_GetTasks_Handler,
		},
		{
			MethodName: "ListTaskss",
			Handler:    _Tasks_ListTaskss_Handler,
		},
		{
			MethodName: "UpdateTasks",
			Handler:    _Tasks_UpdateTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task/taskservice.proto",
}
