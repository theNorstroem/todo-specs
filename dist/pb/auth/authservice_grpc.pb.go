// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package authpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AuthSessionClient is the client API for AuthSession service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthSessionClient interface {
	// Login with credentials #A login is nothing else then creating a valid session
	CreateAuthSession(ctx context.Context, in *CreateAuthSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Logout.
	DeleteAuthSession(ctx context.Context, in *DeleteAuthSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type authSessionClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthSessionClient(cc grpc.ClientConnInterface) AuthSessionClient {
	return &authSessionClient{cc}
}

func (c *authSessionClient) CreateAuthSession(ctx context.Context, in *CreateAuthSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthSession/CreateAuthSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authSessionClient) DeleteAuthSession(ctx context.Context, in *DeleteAuthSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthSession/DeleteAuthSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthSessionServer is the server API for AuthSession service.
// All implementations must embed UnimplementedAuthSessionServer
// for forward compatibility
type AuthSessionServer interface {
	// Login with credentials #A login is nothing else then creating a valid session
	CreateAuthSession(context.Context, *CreateAuthSessionRequest) (*emptypb.Empty, error)
	// Logout.
	DeleteAuthSession(context.Context, *DeleteAuthSessionRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAuthSessionServer()
}

// UnimplementedAuthSessionServer must be embedded to have forward compatible implementations.
type UnimplementedAuthSessionServer struct {
}

func (UnimplementedAuthSessionServer) CreateAuthSession(context.Context, *CreateAuthSessionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthSession not implemented")
}
func (UnimplementedAuthSessionServer) DeleteAuthSession(context.Context, *DeleteAuthSessionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthSession not implemented")
}
func (UnimplementedAuthSessionServer) mustEmbedUnimplementedAuthSessionServer() {}

// UnsafeAuthSessionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthSessionServer will
// result in compilation errors.
type UnsafeAuthSessionServer interface {
	mustEmbedUnimplementedAuthSessionServer()
}

func RegisterAuthSessionServer(s *grpc.Server, srv AuthSessionServer) {
	s.RegisterService(&_AuthSession_serviceDesc, srv)
}

func _AuthSession_CreateAuthSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthSessionServer).CreateAuthSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthSession/CreateAuthSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthSessionServer).CreateAuthSession(ctx, req.(*CreateAuthSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthSession_DeleteAuthSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthSessionServer).DeleteAuthSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthSession/DeleteAuthSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthSessionServer).DeleteAuthSession(ctx, req.(*DeleteAuthSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthSession_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthSession",
	HandlerType: (*AuthSessionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAuthSession",
			Handler:    _AuthSession_CreateAuthSession_Handler,
		},
		{
			MethodName: "DeleteAuthSession",
			Handler:    _AuthSession_DeleteAuthSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/authservice.proto",
}
