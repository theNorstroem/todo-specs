// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package demopb

import (
	context "context"
	signatures "github.com/theNorstroem/FuroBaseSpecs/dist/pb/furo/signatures"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DemosClient is the client API for Demos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DemosClient interface {
	// Use this to create new persons.
	CreateDemos(ctx context.Context, in *CreateDemosRequest, opts ...grpc.CallOption) (*signatures.EmptyEntity, error)
	// Returns a single person.
	GetDemos(ctx context.Context, in *GetDemosRequest, opts ...grpc.CallOption) (*DemoEntity, error)
	// List persons with pagination.
	ListDemoss(ctx context.Context, in *ListDemossRequest, opts ...grpc.CallOption) (*DemoCollection, error)
}

type demosClient struct {
	cc grpc.ClientConnInterface
}

func NewDemosClient(cc grpc.ClientConnInterface) DemosClient {
	return &demosClient{cc}
}

func (c *demosClient) CreateDemos(ctx context.Context, in *CreateDemosRequest, opts ...grpc.CallOption) (*signatures.EmptyEntity, error) {
	out := new(signatures.EmptyEntity)
	err := c.cc.Invoke(ctx, "/demo.Demos/CreateDemos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demosClient) GetDemos(ctx context.Context, in *GetDemosRequest, opts ...grpc.CallOption) (*DemoEntity, error) {
	out := new(DemoEntity)
	err := c.cc.Invoke(ctx, "/demo.Demos/GetDemos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demosClient) ListDemoss(ctx context.Context, in *ListDemossRequest, opts ...grpc.CallOption) (*DemoCollection, error) {
	out := new(DemoCollection)
	err := c.cc.Invoke(ctx, "/demo.Demos/ListDemoss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DemosServer is the server API for Demos service.
// All implementations must embed UnimplementedDemosServer
// for forward compatibility
type DemosServer interface {
	// Use this to create new persons.
	CreateDemos(context.Context, *CreateDemosRequest) (*signatures.EmptyEntity, error)
	// Returns a single person.
	GetDemos(context.Context, *GetDemosRequest) (*DemoEntity, error)
	// List persons with pagination.
	ListDemoss(context.Context, *ListDemossRequest) (*DemoCollection, error)
	mustEmbedUnimplementedDemosServer()
}

// UnimplementedDemosServer must be embedded to have forward compatible implementations.
type UnimplementedDemosServer struct {
}

func (UnimplementedDemosServer) CreateDemos(context.Context, *CreateDemosRequest) (*signatures.EmptyEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDemos not implemented")
}
func (UnimplementedDemosServer) GetDemos(context.Context, *GetDemosRequest) (*DemoEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDemos not implemented")
}
func (UnimplementedDemosServer) ListDemoss(context.Context, *ListDemossRequest) (*DemoCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDemoss not implemented")
}
func (UnimplementedDemosServer) mustEmbedUnimplementedDemosServer() {}

// UnsafeDemosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DemosServer will
// result in compilation errors.
type UnsafeDemosServer interface {
	mustEmbedUnimplementedDemosServer()
}

func RegisterDemosServer(s *grpc.Server, srv DemosServer) {
	s.RegisterService(&_Demos_serviceDesc, srv)
}

func _Demos_CreateDemos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDemosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemosServer).CreateDemos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.Demos/CreateDemos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemosServer).CreateDemos(ctx, req.(*CreateDemosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demos_GetDemos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDemosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemosServer).GetDemos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.Demos/GetDemos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemosServer).GetDemos(ctx, req.(*GetDemosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demos_ListDemoss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDemossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemosServer).ListDemoss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.Demos/ListDemoss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemosServer).ListDemoss(ctx, req.(*ListDemossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Demos_serviceDesc = grpc.ServiceDesc{
	ServiceName: "demo.Demos",
	HandlerType: (*DemosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDemos",
			Handler:    _Demos_CreateDemos_Handler,
		},
		{
			MethodName: "GetDemos",
			Handler:    _Demos_GetDemos_Handler,
		},
		{
			MethodName: "ListDemoss",
			Handler:    _Demos_ListDemoss_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo/demoservice.proto",
}
