// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package personpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PersonsClient is the client API for Persons service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonsClient interface {
	// Use this to create new persons.
	CreatePersons(ctx context.Context, in *CreatePersonsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// We use this to disable a person in the list, we do not delete them.
	DeletePersons(ctx context.Context, in *DeletePersonsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Fireing some persons can increase the performance of the other persons POST. Do not use this to much.
	FirePersons(ctx context.Context, in *FirePersonsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Returns a single person.
	GetPersons(ctx context.Context, in *GetPersonsRequest, opts ...grpc.CallOption) (*PersonEntity, error)
	// List persons with pagination.
	ListPersonss(ctx context.Context, in *ListPersonssRequest, opts ...grpc.CallOption) (*PersonCollection, error)
	// Use this to update existing persons. PATCH is also supported
	UpdatePersons(ctx context.Context, in *UpdatePersonsRequest, opts ...grpc.CallOption) (*PersonEntity, error)
}

type personsClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonsClient(cc grpc.ClientConnInterface) PersonsClient {
	return &personsClient{cc}
}

func (c *personsClient) CreatePersons(ctx context.Context, in *CreatePersonsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/person.Persons/CreatePersons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personsClient) DeletePersons(ctx context.Context, in *DeletePersonsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/person.Persons/DeletePersons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personsClient) FirePersons(ctx context.Context, in *FirePersonsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/person.Persons/FirePersons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personsClient) GetPersons(ctx context.Context, in *GetPersonsRequest, opts ...grpc.CallOption) (*PersonEntity, error) {
	out := new(PersonEntity)
	err := c.cc.Invoke(ctx, "/person.Persons/GetPersons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personsClient) ListPersonss(ctx context.Context, in *ListPersonssRequest, opts ...grpc.CallOption) (*PersonCollection, error) {
	out := new(PersonCollection)
	err := c.cc.Invoke(ctx, "/person.Persons/ListPersonss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personsClient) UpdatePersons(ctx context.Context, in *UpdatePersonsRequest, opts ...grpc.CallOption) (*PersonEntity, error) {
	out := new(PersonEntity)
	err := c.cc.Invoke(ctx, "/person.Persons/UpdatePersons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonsServer is the server API for Persons service.
// All implementations must embed UnimplementedPersonsServer
// for forward compatibility
type PersonsServer interface {
	// Use this to create new persons.
	CreatePersons(context.Context, *CreatePersonsRequest) (*emptypb.Empty, error)
	// We use this to disable a person in the list, we do not delete them.
	DeletePersons(context.Context, *DeletePersonsRequest) (*emptypb.Empty, error)
	// Fireing some persons can increase the performance of the other persons POST. Do not use this to much.
	FirePersons(context.Context, *FirePersonsRequest) (*emptypb.Empty, error)
	// Returns a single person.
	GetPersons(context.Context, *GetPersonsRequest) (*PersonEntity, error)
	// List persons with pagination.
	ListPersonss(context.Context, *ListPersonssRequest) (*PersonCollection, error)
	// Use this to update existing persons. PATCH is also supported
	UpdatePersons(context.Context, *UpdatePersonsRequest) (*PersonEntity, error)
	mustEmbedUnimplementedPersonsServer()
}

// UnimplementedPersonsServer must be embedded to have forward compatible implementations.
type UnimplementedPersonsServer struct {
}

func (UnimplementedPersonsServer) CreatePersons(context.Context, *CreatePersonsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePersons not implemented")
}
func (UnimplementedPersonsServer) DeletePersons(context.Context, *DeletePersonsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePersons not implemented")
}
func (UnimplementedPersonsServer) FirePersons(context.Context, *FirePersonsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FirePersons not implemented")
}
func (UnimplementedPersonsServer) GetPersons(context.Context, *GetPersonsRequest) (*PersonEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersons not implemented")
}
func (UnimplementedPersonsServer) ListPersonss(context.Context, *ListPersonssRequest) (*PersonCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPersonss not implemented")
}
func (UnimplementedPersonsServer) UpdatePersons(context.Context, *UpdatePersonsRequest) (*PersonEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePersons not implemented")
}
func (UnimplementedPersonsServer) mustEmbedUnimplementedPersonsServer() {}

// UnsafePersonsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonsServer will
// result in compilation errors.
type UnsafePersonsServer interface {
	mustEmbedUnimplementedPersonsServer()
}

func RegisterPersonsServer(s *grpc.Server, srv PersonsServer) {
	s.RegisterService(&_Persons_serviceDesc, srv)
}

func _Persons_CreatePersons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePersonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonsServer).CreatePersons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/person.Persons/CreatePersons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonsServer).CreatePersons(ctx, req.(*CreatePersonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Persons_DeletePersons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePersonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonsServer).DeletePersons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/person.Persons/DeletePersons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonsServer).DeletePersons(ctx, req.(*DeletePersonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Persons_FirePersons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirePersonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonsServer).FirePersons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/person.Persons/FirePersons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonsServer).FirePersons(ctx, req.(*FirePersonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Persons_GetPersons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonsServer).GetPersons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/person.Persons/GetPersons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonsServer).GetPersons(ctx, req.(*GetPersonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Persons_ListPersonss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPersonssRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonsServer).ListPersonss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/person.Persons/ListPersonss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonsServer).ListPersonss(ctx, req.(*ListPersonssRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Persons_UpdatePersons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePersonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonsServer).UpdatePersons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/person.Persons/UpdatePersons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonsServer).UpdatePersons(ctx, req.(*UpdatePersonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Persons_serviceDesc = grpc.ServiceDesc{
	ServiceName: "person.Persons",
	HandlerType: (*PersonsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePersons",
			Handler:    _Persons_CreatePersons_Handler,
		},
		{
			MethodName: "DeletePersons",
			Handler:    _Persons_DeletePersons_Handler,
		},
		{
			MethodName: "FirePersons",
			Handler:    _Persons_FirePersons_Handler,
		},
		{
			MethodName: "GetPersons",
			Handler:    _Persons_GetPersons_Handler,
		},
		{
			MethodName: "ListPersonss",
			Handler:    _Persons_ListPersonss_Handler,
		},
		{
			MethodName: "UpdatePersons",
			Handler:    _Persons_UpdatePersons_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "person/personservice.proto",
}
